plugins {
    id 'java'
    id 'maven-publish'
    id 'signing'
}

group = 'com.karasu256.one_shot_glory'

// バージョン情報を保存するプロパティファイルを定義
def versionFile = file('version.properties')
def versionProps = new Properties()

// プロパティファイルが存在する場合は読み込む、存在しない場合は新規作成
if (versionFile.exists()) {
    versionFile.withInputStream { versionProps.load(it) }
} else {
    versionProps.setProperty('major', '0')
    versionProps.setProperty('minor', '1')
    versionProps.setProperty('patch', '0')
    versionFile.createNewFile()
}

// ビルド番号を保存するプロパティファイルを定義
def buildNumberFile = file('build-number.properties')
def buildProps = new Properties()

// プロパティファイルが存在する場合は読み込む、存在しない場合は新規作成
if (buildNumberFile.exists()) {
    buildNumberFile.withInputStream { buildProps.load(it) }
} else {
    buildProps.setProperty('buildNumber', '0')
    buildNumberFile.createNewFile()
}

// 現在のバージョン情報を取得
def majorVersion = versionProps.getProperty('major').toInteger()
def minorVersion = versionProps.getProperty('minor').toInteger()
def patchVersion = versionProps.getProperty('patch').toInteger()
def buildNumber = buildProps.getProperty('buildNumber').toInteger()

// バージョン番号の設定（メジャー.マイナー.パッチ-build.ビルド番号）
version = "${majorVersion}.${minorVersion}.${patchVersion}-build.${buildNumber}"

// バージョン更新タスク
task updateVersion {
    doLast {
        def type = project.hasProperty('versionType') ? project.getProperty('versionType') : 'none'
        
        switch (type.toLowerCase()) {
            case 'major':
                majorVersion++
                minorVersion = 0
                patchVersion = 0
                buildNumber = 0
                println "Incrementing major version to ${majorVersion}.${minorVersion}.${patchVersion}"
                break
            case 'minor':
                minorVersion++
                patchVersion = 0
                buildNumber = 0
                println "Incrementing minor version to ${majorVersion}.${minorVersion}.${patchVersion}"
                break
            case 'patch':
                patchVersion++
                buildNumber = 0
                println "Incrementing patch version to ${majorVersion}.${minorVersion}.${patchVersion}"
                break
            default:
                // バージョンタイプが指定されていない場合はビルド番号のみをインクリメント
                buildNumber++
                println "Incrementing build number to ${buildNumber}"
                break
        }
        
        // 更新されたバージョン情報を保存
        versionProps.setProperty('major', majorVersion.toString())
        versionProps.setProperty('minor', minorVersion.toString())
        versionProps.setProperty('patch', patchVersion.toString())
        versionFile.withOutputStream { versionProps.store(it, "Version properties for ${project.name}") }
        
        buildProps.setProperty('buildNumber', buildNumber.toString())
        buildNumberFile.withOutputStream { buildProps.store(it, "Build Number for ${project.name}") }
        
        // バージョン番号を更新
        version = "${majorVersion}.${minorVersion}.${patchVersion}-build.${buildNumber}"
        println "New version: ${version}"
    }
}

// ビルド実行時にビルド番号をインクリメント
task incrementBuildNumber {
    doLast {
        buildNumber++
        buildProps.setProperty('buildNumber', buildNumber.toString())
        buildNumberFile.withOutputStream { buildProps.store(it, "Build Number for ${project.name}") }
        println "Build number incremented to ${buildNumber}"
        
        // バージョン番号を更新
        version = "${majorVersion}.${minorVersion}.${patchVersion}-build.${buildNumber}"
    }
}

// リリースタスク
task release {
    dependsOn updateVersion, build
    description = 'Updates version according to specified type (major, minor, patch) and builds the project'
    
    doLast {
        println "Released version ${version}"
    }
}

// ビルドタスクの前にビルド番号をインクリメント（通常ビルド時）
tasks.named('build').configure {
    // release タスクから呼ばれた場合はビルド番号のインクリメントをスキップ
    if (!gradle.startParameter.taskNames.contains('release')) {
        dependsOn incrementBuildNumber
    }
}

// リリースタスクの実行順序を設定
release.dependsOn = []  // 既存の依存関係をクリア
release.dependsOn 'updateVersion', 'build'

// updateVersion タスクを先に実行するように設定
build.mustRunAfter updateVersion

repositories {
    mavenCentral()
    maven {
        name = "papermc-repo"
        url = "https://repo.papermc.io/repository/maven-public/"
    }
    maven {
        name = "sonatype"
        url = "https://oss.sonatype.org/content/groups/public/"
    }
    maven {
        name = "sponge"
        url = "https://repo.spongepowered.org/repository/maven-public/"
    }
}

dependencies {
    compileOnly("io.papermc.paper:paper-api:1.21.3-R0.1-SNAPSHOT")
}

def targetJavaVersion = 21
java {
    def javaVersion = JavaVersion.toVersion(targetJavaVersion)
    sourceCompatibility = javaVersion
    targetCompatibility = javaVersion
    if (JavaVersion.current() < javaVersion) {
        toolchain.languageVersion = JavaLanguageVersion.of(targetJavaVersion)
    }
    
    // Maven Centralリリースに必要なJavadocとソースJARを追加
    withJavadocJar()
    withSourcesJar()
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'

    if (targetJavaVersion >= 10 || JavaVersion.current().isJava10Compatible()) {
        options.release.set(targetJavaVersion)
    }
}

processResources {
    def props = [version: version]
    inputs.properties props
    filteringCharset 'UTF-8'
    filesMatching('plugin.yml') {
        expand props
    }
}

tasks.register('buildJar', Jar) {
    // archiveBaseName.setの代わりに、命名規則をMaven出版と一致させる
    archiveBaseName.set('One-Shot-Glory')
    from sourceSets.main.output
    dependsOn configurations.compileClasspath
}

// Maven Central公開向けにJARファイルを確実に生成するための設定
publishing {
    publications {
        mavenJava(MavenPublication) {
            // jarタスクの出力を使用するのではなく、明示的にbuildJarタスクの出力を参照する
            artifact tasks.named('buildJar')
            artifact tasks.named('javadocJar')
            artifact tasks.named('sourcesJar')
            
            pom {
                name = 'One-Shot Glory'
                description = 'A Minecraft plugin that enhances combat with one-shot mechanics'
                url = 'https://github.com/karasu256/One-Shot-Glory'
                
                licenses {
                    license {
                        name = 'MIT License'
                        url = 'https://opensource.org/licenses/MIT'
                    }
                }
                
                developers {
                    developer {
                        id = 'hashibutogarasu'
                        name = 'Hashibutogarasu'
                        email = 'karasu@karasu256.com'
                    }
                }
                
                scm {
                    connection = 'scm:git:git://github.com/karasu256/One-Shot-Glory.git'
                    developerConnection = 'scm:git:ssh://github.com/karasu256/One-Shot-Glory.git'
                    url = 'https://github.com/Hashibutogarasu/One-Shot-Glory'
                }
            }
        }
    }
    
    repositories {
        maven {
            name = "OSSRH"
            def releasesRepoUrl = "https://s01.oss.sonatype.org/service/local/staging/deploy/maven2/"
            def snapshotsRepoUrl = "https://s01.oss.sonatype.org/content/repositories/snapshots/"
            url = version.endsWith('SNAPSHOT') ? snapshotsRepoUrl : releasesRepoUrl
            
            credentials {
                username = findProperty('ossrhUsername') ?: System.getenv('OSSRH_USERNAME')
                password = findProperty('ossrhPassword') ?: System.getenv('OSSRH_PASSWORD')
            }
        }
    }
}

signing {
    required { gradle.taskGraph.hasTask("publish") }
    useGpgCmd()
    sign publishing.publications.mavenJava
}