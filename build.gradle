plugins {
    id 'java'
    id 'maven-publish'
    id 'signing'
}

group = 'com.karasu256'

def versionFile = file('version.properties')
def versionProps = new Properties()

if (versionFile.exists()) {
    versionFile.withInputStream { versionProps.load(it) }
} else {
    versionProps.setProperty('major', '0')
    versionProps.setProperty('minor', '1')
    versionProps.setProperty('patch', '0')
    versionFile.createNewFile()
}

def buildNumberFile = file('build-number.properties')
def buildProps = new Properties()

if (buildNumberFile.exists()) {
    buildNumberFile.withInputStream { buildProps.load(it) }
} else {
    buildProps.setProperty('buildNumber', '0')
    buildNumberFile.createNewFile()
}

def majorVersion = versionProps.getProperty('major').toInteger()
def minorVersion = versionProps.getProperty('minor').toInteger()
def patchVersion = versionProps.getProperty('patch').toInteger()
def buildNumber = buildProps.getProperty('buildNumber').toInteger()

version = "${majorVersion}.${minorVersion}.${patchVersion}-build.${buildNumber}"

task updateVersion {
    doLast {
        def type = project.hasProperty('versionType') ? project.getProperty('versionType') : 'none'
        
        switch (type.toLowerCase()) {
            case 'major':
                majorVersion++
                minorVersion = 0
                patchVersion = 0
                buildNumber = 0
                println "Incrementing major version to ${majorVersion}.${minorVersion}.${patchVersion}"
                break
            case 'minor':
                minorVersion++
                patchVersion = 0
                buildNumber = 0
                println "Incrementing minor version to ${majorVersion}.${minorVersion}.${patchVersion}"
                break
            case 'patch':
                patchVersion++
                buildNumber = 0
                println "Incrementing patch version to ${majorVersion}.${minorVersion}.${patchVersion}"
                break
            default:
                buildNumber++
                println "Incrementing build number to ${buildNumber}"
                break
        }
        
        versionProps.setProperty('major', majorVersion.toString())
        versionProps.setProperty('minor', minorVersion.toString())
        versionProps.setProperty('patch', patchVersion.toString())
        versionFile.withOutputStream { versionProps.store(it, "Version properties for ${project.name}") }
        
        buildProps.setProperty('buildNumber', buildNumber.toString())
        buildNumberFile.withOutputStream { buildProps.store(it, "Build Number for ${project.name}") }
        
        version = "${majorVersion}.${minorVersion}.${patchVersion}-build.${buildNumber}"
        println "New version: ${version}"
    }
}

task incrementBuildNumber {
    doLast {
        buildNumber++
        buildProps.setProperty('buildNumber', buildNumber.toString())
        buildNumberFile.withOutputStream { buildProps.store(it, "Build Number for ${project.name}") }
        println "Build number incremented to ${buildNumber}"
        
        version = "${majorVersion}.${minorVersion}.${patchVersion}-build.${buildNumber}"
    }
}

task release {
    dependsOn updateVersion, build
    description = 'Updates version according to specified type (major, minor, patch) and builds the project'
    
    doLast {
        println "Released version ${version}"
    }
}

tasks.named('build').configure {
    if (!gradle.startParameter.taskNames.contains('release') 
        && !gradle.startParameter.taskNames.any { it.contains('publish') || it == 'publishToMavenCentral' }) {
        dependsOn incrementBuildNumber
    }
}

task publishToMavenCentral {
    group = 'publishing'
    description = 'Cleans the build, creates all JARs, signs them, and publishes to Maven Central'
    
    dependsOn 'clean', tasks.withType(Jar), 'publish'
    
    tasks.named('publish').configure {
        mustRunAfter tasks.withType(Jar)
    }
    
    doLast {
        println "Publication to Maven Central prepared for version ${version}"
    }
}

release.dependsOn = []
release.dependsOn 'updateVersion', 'build'

build.mustRunAfter updateVersion

repositories {
    mavenCentral()
    maven {
        name = "papermc-repo"
        url = "https://repo.papermc.io/repository/maven-public/"
    }
    maven {
        name = "sonatype"
        url = "https://oss.sonatype.org/content/groups/public/"
    }
    maven {
        name = "sponge"
        url = "https://repo.spongepowered.org/repository/maven-public/"
    }
}

dependencies {
    compileOnly("io.papermc.paper:paper-api:1.21.3-R0.1-SNAPSHOT")
}

def targetJavaVersion = 21
java {
    def javaVersion = JavaVersion.toVersion(targetJavaVersion)
    sourceCompatibility = javaVersion
    targetCompatibility = javaVersion
    if (JavaVersion.current() < javaVersion) {
        toolchain.languageVersion = JavaLanguageVersion.of(targetJavaVersion)
    }
    
    withJavadocJar()
    withSourcesJar()
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'

    if (targetJavaVersion >= 10 || JavaVersion.current().isJava10Compatible()) {
        options.release.set(targetJavaVersion)
    }
}

processResources {
    def props = [version: version]
    inputs.properties props
    filteringCharset 'UTF-8'
    filesMatching('plugin.yml') {
        expand props
    }
}

jar {
    archiveBaseName.set('One-Shot-Glory')
    from sourceSets.main.output
}

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}

tasks.withType(GroovyCompile) {
    options.encoding = 'UTF-8'
}

tasks.withType(JavaExec) {
    systemProperty 'file.encoding', 'UTF-8'
}

publishing {
    repositories {
        maven {
            name = "GitHubPackages"
            url = uri("https://maven.pkg.github.com/Hashibutogarasu/One-Shot-Glory")
            credentials {
                username = findProperty('gpr.user') ?: System.getenv("GITHUB_USERNAME")
                password = findProperty('gpr.key') ?: System.getenv("GITHUB_TOKEN")
            }
        }
    }
    
    publications {
        mavenJava(MavenPublication) {
            from components.java
            
            pom {
                name = 'One-Shot-Glory'
                description = 'A Minecraft plugin that enhances combat with one-shot mechanics'
                url = 'https://github.com/karasu256/One-Shot-Glory'
                
                licenses {
                    license {
                        name = 'MIT License'
                        url = 'https://opensource.org/licenses/MIT'
                    }
                }
                
                developers {
                    developer {
                        id = 'hashibutogarasu'
                        name = 'Hashibutogarasu'
                        email = 'karasu@karasu256.com'
                    }
                }
                
                scm {
                    connection = 'scm:git:git://github.com/karasu256/One-Shot-Glory.git'
                    developerConnection = 'scm:git:ssh://github.com/Hashibutogarasu/One-Shot-Glory.git'
                    url = 'https://github.com/Hashibutogarasu/One-Shot-Glory'
                }
            }
        }
    }
}

signing {
    // 環境変数もしくはプロパティからの読み込み設定を追加
    def signingKey = findProperty('signingKey') ?: System.getenv('GPG_SIGNING_KEY')
    def signingPassword = findProperty('signingPassword') ?: System.getenv('GPG_SIGNING_PASSWORD')
    
    if (signingKey && signingPassword) {
        useInMemoryPgpKeys(signingKey, signingPassword)
    } else {
        useGpgCmd() // GPGコマンドを使う場合はこちらを残す
    }
    
    sign publishing.publications.mavenJava
}

tasks.withType(Sign) {
    dependsOn tasks.withType(Jar)
}

tasks.withType(PublishToMavenRepository) {
    mustRunAfter tasks.withType(Sign)
}

task prepareForPublish {
    dependsOn jar, javadocJar, sourcesJar
    doLast {
        println "Prepared JAR files for signing and publishing."
    }
}

task printArtifactPaths {
    doLast {
        publishing.publications.mavenJava.artifacts.each { artifact ->
            println "Artifact: ${artifact.file}"
        }
    }
}

tasks.register('buildJar', Jar) {
    archiveBaseName.set('One-Shot-Glory')
    from sourceSets.main.output
    dependsOn configurations.compileClasspath
}

tasks.named('generateMetadataFileForMavenJavaPublication') {
    dependsOn 'buildJar'
}

tasks.register('copyJar', Copy) {
    from buildJar
    into 'run/plugins'
}

tasks.withType(Javadoc) {
    options.encoding = 'UTF-8'
    options.charSet = 'UTF-8'
    options.docEncoding = 'UTF-8'
}