name: Publish JavaDoc to docs branch

on:
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]
  workflow_dispatch:  # 手動実行も可能にする

jobs:
  check-owner:
    uses: ./.github/workflows/check-owner-permission.yml
    
  publish-javadoc:
    needs: check-owner
    if: needs.check-owner.outputs.is_owner == 'true'
    runs-on: ubuntu-latest
    permissions:
      contents: write  # リポジトリにコミットする権限を付与
      
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # 完全なコミット履歴を取得
      
      - name: Make gradlew executable
        run: chmod +x ./gradlew
        
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: "17"
          distribution: "temurin"
          
      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@v3
        
      - name: Generate JavaDoc
        run: ./gradlew javadoc
        
      - name: Configure Git
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
      
      - name: Check if docs branch exists
        id: check_branch
        run: |
          if git ls-remote --heads origin docs | grep docs; then
            echo "Branch exists"
            echo "branch_exists=true" >> $GITHUB_OUTPUT
          else
            echo "Branch does not exist"
            echo "branch_exists=false" >> $GITHUB_OUTPUT
          fi
      
      - name: Create and publish to docs branch (New branch)
        if: steps.check_branch.outputs.branch_exists == 'false'
        run: |
          # JavaDocを別のディレクトリにコピー
          mkdir -p ../javadoc_temp
          cp -r build/docs/javadoc/* ../javadoc_temp/
          
          # READMEファイルを作成
          echo "# One-Shot Glory JavaDoc" > ../javadoc_temp/README.md
          echo "" >> ../javadoc_temp/README.md
          echo "このブランチには自動生成されたJavaDocが含まれています。" >> ../javadoc_temp/README.md
          echo "最終更新: $(date '+%Y年%m月%d日 %H:%M:%S')" >> ../javadoc_temp/README.md
          
          # 変更をリセットしてから新しいブランチを作成
          git reset --hard
          git clean -fd
          git checkout --orphan docs
          
          # ワーキングディレクトリをクリアして新しいファイルをコピー
          git rm -rf .
          cp -r ../javadoc_temp/* .
          rm -rf ../javadoc_temp
          
          # 変更をコミットしてプッシュ
          git add .
          git commit -m "自動生成: JavaDocを更新 [ci skip]"
          git push -u origin HEAD:docs --force
      
      - name: Update existing docs branch
        if: steps.check_branch.outputs.branch_exists == 'true'
        run: |
          # JavaDocを別のディレクトリにコピー
          mkdir -p ../javadoc_temp
          cp -r build/docs/javadoc/* ../javadoc_temp/
          
          # READMEファイルを作成または更新
          echo "# One-Shot Glory JavaDoc" > ../javadoc_temp/README.md
          echo "" >> ../javadoc_temp/README.md
          echo "このブランチには自動生成されたJavaDocが含まれています。" >> ../javadoc_temp/README.md
          echo "最終更新: $(date '+%Y年%m月%d日 %H:%M:%S')" >> ../javadoc_temp/README.md
          
          # 変更をリセットしてからdocsブランチをチェックアウト
          git reset --hard
          git clean -fd
          git fetch origin
          git checkout -b docs --track origin/docs || git checkout -f docs
          git pull origin docs
          
          # 既存のファイルを削除し、新しいJavaDocをコピー
          find . -mindepth 1 -not -path "./.git*" -delete
          cp -r ../javadoc_temp/* .
          rm -rf ../javadoc_temp
          
          # 変更をコミットしてプッシュ
          git add .
          
          if git diff --staged --quiet; then
            echo "No changes to JavaDoc, skipping commit"
            exit 0
          fi
          
          git commit -m "自動生成: JavaDocを更新 [ci skip]"
          git push -u origin docs