name: Create a new release

on:
  workflow_dispatch:
    inputs:
      versionType:
        description: "バージョンタイプ"
        required: true
        default: "patch"
        type: choice
        options:
          - major
          - minor
          - patch
      releaseNotes:
        description: "リリースノート"
        required: true
        default: "リリースノート"
      updateChangelog:
        description: "変更履歴を更新する"
        required: true
        default: true
        type: boolean

  push:
    branches-ignore:
      - "**"

jobs:
  check-permission:
    uses: ./.github/workflows/check-owner-permission.yml

  # 変更履歴を更新（オプション）
  update-changelog:
    needs: check-permission
    if: ${{ github.event.inputs.updateChangelog == 'true' }}
    uses: ./.github/workflows/update-changelog.yml
    permissions:
      contents: write  # この権限を追加して、コンテンツの書き込みを許可
    with:
      releaseType: ${{ github.event.inputs.versionType }}
      customMessage: ${{ github.event.inputs.releaseNotes }}

  # バージョンをチェックし、必要に応じて調整するワークフローを呼び出し
  check-version:
    needs: check-permission
    uses: ./.github/workflows/check-version.yml
    with:
      versionType: ${{ github.event.inputs.versionType }}

  # gradle.ymlワークフローを呼び出してビルドを実行
  build-plugin:
    needs: [check-permission, check-version]
    uses: ./.github/workflows/gradle.yml
    permissions:
      actions: write
      contents: write

  build-release:
    needs: [check-permission, build-plugin, check-version]
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Make gradlew executable
        run: chmod +x ./gradlew

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: "21"
          distribution: "temurin"

      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@v4

      - name: Update version
        run: ./gradlew release -PversionType=${{ github.event.inputs.versionType }} -x build
        # check-versionワークフローですでに調整済みの場合は、そのバージョンを採用する
        if: ${{ needs.check-version.outputs.version_changed == 'false' }}

      - name: Extract version
        id: extract_version
        run: |
          MAJOR=$(grep -Po "(?<=^major=).*$" version.properties)
          MINOR=$(grep -Po "(?<=^minor=).*$" version.properties)
          PATCH=$(grep -Po "(?<=^patch=).*$" version.properties)
          FULL_VERSION="${MAJOR}.${MINOR}.${PATCH}"
          echo "version=${FULL_VERSION}" >> $GITHUB_OUTPUT
          
          # check-versionワークフローからのバージョンと比較して確認
          CHECK_VERSION="${{ needs.check-version.outputs.final_version }}"
          if [ "$CHECK_VERSION" != "" ] && [ "$CHECK_VERSION" != "$FULL_VERSION" ]; then
            echo "Warning: Version mismatch detected. Using check-version output: $CHECK_VERSION"
            echo "version=$CHECK_VERSION" >> $GITHUB_OUTPUT
          fi
      
      - name: Update plugin.yml version
        run: |
          # plugin.ymlのバージョンを更新する
          VERSION="${{ steps.extract_version.outputs.version }}"
          echo "Updating plugin.yml version to ${VERSION}"
          sed -i "s/^version: '.*'/version: '${VERSION}'/" src/main/resources/plugin.yml
      
      - name: Commit version changes
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git pull --rebase origin main || (echo "==== リベースに失敗しました。マージを試みます ====" && git pull --no-rebase)
          git commit -m "Bump version to v${{ steps.extract_version.outputs.version }} [skip ci]"
          git push
      
      # gradle.ymlワークフローからビルドされたアーティファクトをダウンロード
      - name: Download Plugin JAR Artifact
        uses: actions/download-artifact@v4
        with:
          name: One-Shot-Glory-Plugin
          path: ./downloaded-artifacts
        continue-on-error: false

      - name: Display downloaded artifacts
        run: |
          echo "Downloaded artifacts:"
          ls -la ./downloaded-artifacts || echo "No artifacts found"

      - name: Copy and get artifact filename
        id: get_artifact
        run: |
          mkdir -p ./release-artifacts
          ARTIFACT_FILE=$(ls ./downloaded-artifacts/One-Shot-Glory-*.jar | head -n 1)
          cp "$ARTIFACT_FILE" ./release-artifacts/
          ARTIFACT_FILENAME=$(basename "$ARTIFACT_FILE")
          echo "filename=$ARTIFACT_FILENAME" >> $GITHUB_OUTPUT
          echo "Found artifact: $ARTIFACT_FILENAME"

      # CHANGELOGファイルが存在する場合、リリースノートとして使用する
      - name: Prepare release notes
        id: prepare_notes
        run: |
          RELEASE_NOTES="${{ github.event.inputs.releaseNotes }}"
          
          if [ -f "CHANGELOG.md" ]; then
            echo "CHANGELOGファイルが見つかりました。内容を追加します。"
            # 最新のバージョンセクションを抽出
            VERSION_PATTERN="## \[v${{ steps.extract_version.outputs.version }}\]"
            NEXT_VERSION_PATTERN="## \[v"
            
            # 最新バージョンのセクションを抽出
            CHANGELOG_CONTENT=$(awk -v pattern="$VERSION_PATTERN" -v next_pattern="$NEXT_VERSION_PATTERN" '
            $0 ~ pattern {print; found=1; next}
            found==1 && $0 ~ next_pattern {exit}
            found==1 {print}
            ' CHANGELOG.md)
            
            if [ ! -z "$CHANGELOG_CONTENT" ]; then
              RELEASE_NOTES="${RELEASE_NOTES}\n\n${CHANGELOG_CONTENT}"
            fi
          fi
          
          # 改行をGitHub Actionsの形式に変換
          RELEASE_NOTES="${RELEASE_NOTES//$'\n'/%0A}"
          echo "notes=${RELEASE_NOTES}" >> $GITHUB_OUTPUT

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ steps.extract_version.outputs.version }}
          release_name: Release v${{ steps.extract_version.outputs.version }}
          body: ${{ steps.prepare_notes.outputs.notes }}
          draft: false
          prerelease: false

      - name: Upload Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./release-artifacts/${{ steps.get_artifact.outputs.filename }}
          asset_name: ${{ steps.get_artifact.outputs.filename }}
          asset_content_type: application/java-archive

      - name: Commit version changes
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git commit -m "Bump version to v${{ steps.extract_version.outputs.version }} [skip ci]"
          git push